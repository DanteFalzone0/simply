/*
	Commodore64 random maze example
	Reimplements the following code:
	10 PRINT CHR$(205.5+RND(1)); : GOTO 10
	
	However, only draws a single screen.
	Click/tap on the canvas to regenerate the maze.
*/

unless !CANVAS then {
	echo "❌ The canvas module is required for this example";
	return;
}

%fg = "rgb(162, 143, 255)";
%bg = "rgb(96, 73, 237)";

%c = call !CANVAS->init(384, 272, %bg);

call %c->setCoordMode("grid", 8); //8x8
call %c->setFillStyle(%fg);


// Generate the 4 sprites
for $i from 0 to .75 step .125 {
	call %c->fillRect($i, &sub(.75, $i), .25, .25);
	call %c->fillRect(&add(2, $i), &sub(.75, $i), .25, .25);
	
	call %c->fillRect(&add(1, $i), $i, .25, .25);
	call %c->fillRect(&add(3, $i), $i, .25, .25);
}

// $image, $width and $height of the sprites
%sheet = call %c->createSpritesheet(call %c->getImage(0, 0, 5, 1), 1, 1);


// Clear everything and generate what we pretend to show
call %c->clear(%fg);

call %c->fillRect(%x = 4, %y = 4.5, %width = 40, %height = 25, %bg);


// Keep track if the function &draw was called
%drawing = false;

def &draw() {
	// Leave if we are already drawing
	if %drawing return;
	
	%drawing = true;
	call %c->suspendUpdates();
	
	$array = [];
	$count = &sub(%sheet->length, 1);

	for $i from 1 to %height {
		for $j from 1 to %width {
			$array[$j] = &rand(0, $count);
		}
		
		call %sheet->drawSpriteLine($array, %x, &add(%y, $i, -1));
	}
	
	call %c->resumeUpdates();
	%drawing = false;
}

// Handles the mouse down/screen tap
call %c->onup(&draw);
&draw();
